pragma solidity ^0.5.0;

contract Payroll {
    address public owner;
    uint public totalEmployees;
    uint public balance;

    struct Employee {
        // 当前账户余额
        uint balance;
        // 付款状态
        uint payState;
    }

    mapping(address => Employee) public employees;

    constructor() public {
        owner = msg.sender;
    }

    function addEmployee(address employee) public {
        employees[employee] = Employee(0, 1);
        totalEmployees++;
    }

    function removeEmployee(address employee) public {
        delete employees[employee];
        totalEmployees--;
    }

    function updateEmployee(address employee, uint payState) public {
        employees[employee].payState = payState;
    }

    function addFund(uint amount) public payable {
        balance += amount;
    }

    function getAdminBalance() public view returns (uint) {
        return balance;
    }

    function getBalance() public view returns (uint) {
        return employees[address(msg.sender)].balance;
    }

    function getSender() public view returns (address) {
        // 返回调用者的地址
        return msg.sender;
    }

    function getPaid(uint amount) public {
        require(employees[address(msg.sender)].salary != 0, "您还不是员工！");
        require(employees[address(msg.sender)].payState == 1, "员工处于薪资关闭状态！");
        employees[address(msg.sender)].balance += amount;
        balance -= amount;
    }
}
