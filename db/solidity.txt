pragma solidity ^0.5.0;

contract Payroll {
    address public owner;
    uint public totalEmployees;
    uint public balance;

    struct Employee {
        uint salary;
        uint lastPayday;
        uint balance;
        uint payDuration;
        uint holiday;
    }

    mapping(address => Employee) public employees;

    constructor() public {
        owner = msg.sender;
    }

    function addEmployee(address employee, uint salary, uint timestamp, uint payDuration) public {
        employees[employee] = Employee(salary, timestamp, 0, payDuration, 0);
        totalEmployees++;
    }

    function removeEmployee(address employee) public {
        delete employees[employee];
        totalEmployees--;
    }

    function updateEmployee(address employee, uint salary, uint payDuration, uint holiday) public {
        employees[employee].salary = salary;
        employees[employee].payDuration = payDuration;
        employees[employee].holiday += holiday;
    }

    function addFund(uint amount) public payable {
        balance += amount;
    }

    function getAdminBalance() public view returns (uint) {
        return balance;
    }

    function getBalance() public view returns (uint) {
        return employees[address(msg.sender)].balance;
    }

    function getSalary()  public view returns (uint) {
        return employees[address(msg.sender)].salary;
    }

    function getSender() public view returns (address) {
        // 返回调用者的地址
        return msg.sender;
    }

    function getNextPayTime() public view returns (uint) {
        // 检查是否存在发送者地址对应的雇员信息
        require(employees[address(msg.sender)].salary != 0, "您还不是员工！");
        uint nextPayday = employees[address(msg.sender)].lastPayday + employees[address(msg.sender)].payDuration;
        return nextPayday;
    }

    function getPaid(uint timestamp, uint timeUnit) public returns (uint) {
        require(employees[address(msg.sender)].salary != 0, "您还不是员工！");
        uint nextPayday = employees[address(msg.sender)].lastPayday + employees[address(msg.sender)].payDuration;
        require(timestamp >= nextPayday, "还未到账户支付时间");
        uint times = (timestamp - employees[address(msg.sender)].lastPayday) / timeUnit;
        uint totalDay = times - employees[address(msg.sender)].holiday;
        require(timestamp >= 0, "计薪天数必须大于0");
        uint totalSalary = totalDay * employees[address(msg.sender)].salary;
        employees[address(msg.sender)].lastPayday = nextPayday;
        employees[address(msg.sender)].balance += totalSalary;
        balance -= totalSalary;
        employees[address(msg.sender)].holiday = 0;
        return totalSalary;
    }
}
